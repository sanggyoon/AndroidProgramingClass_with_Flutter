다음 요구 사항에 맞춰 코드 수정해줘. 수정된 코드에 오류는 없는지 요구 사항에 일치하는지 차근차근 천천히 살펴보고 수정된 코드 보여줘.
1. Activate Task 토글을 on 상태로 바꾸었을 때 Today Tasks 에 출력되지 않는 문제.
2. 모달창에서 요일은 체크 박스로 중복 선택할 수 있도록 [M T W T F S S] 순으로 표시.
3. 모달창에서 여러 색상을 선택할 수 있도록 여러 색상을 표시하고 하나의 색상을 선택할 수 있도록 표시.
//homepage.dart
import 'package:bucket_list_with_firebase/activatedList.dart';
import 'package:bucket_list_with_firebase/auth_service.dart';
import 'package:bucket_list_with_firebase/bucket_service.dart';
import 'package:bucket_list_with_firebase/main.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'todoList.dart';

/// 홈페이지
class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  TextEditingController jobController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final authService = context.read<AuthService>();
    final user = authService.currentUser()!;
    return Consumer<BucketService>(
      builder: (context, bucketService, child) {
        return Scaffold(
          appBar: AppBar(
            backgroundColor: const Color.fromARGB(255, 88, 165, 232),
            title: const Text("버킷 리스트"),
            actions: [
              TextButton(
                child: const Text(
                  "로그아웃",
                  style: TextStyle(color: Colors.white),
                ),
                onPressed: () {
                  // 로그아웃
                  context.read<AuthService>().signOut();

                  // 로그인 페이지로 이동
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (context) => const LoginPage()),
                  );
                },
              ),
            ],
          ),
          body: Column(
            children: [
              TodoList(userId: user.uid),
              SizedBox(height: 16), // 위젯 간 간격 추가
              Expanded(
                child: ActivatedList(userId: user.uid),
              ),
            ],
          ),
        );
      },
    );
  }
}
//todoList.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'bucket_service.dart';
import 'dart:core';

class TodoList extends StatefulWidget {
  final String userId;

  TodoList({required this.userId});

  @override
  _TodoListState createState() => _TodoListState();
}

class _TodoListState extends State<TodoList> {
  @override
  Widget build(BuildContext context) {
    final bucketService = context.watch<BucketService>();
    DateTime now = DateTime.now();
    int today = now.weekday; // 오늘의 요일 (1=월요일, 7=일요일)

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            "Today Tasks",
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Consumer<BucketService>(
          builder: (context, bucketService, child) {
            return FutureBuilder<QuerySnapshot>(
              future: bucketService.bucketCollection
                  .where('uid', isEqualTo: widget.userId)
                  .where('isActivate', isEqualTo: true)
                  .get(),
              builder: (context, snapshot) {
                final documents = snapshot.data?.docs ?? [];
                if (documents.isEmpty) {
                  return Center(child: Text("오늘의 할 일을 추가해주세요."));
                }
                return ListView.builder(
                  shrinkWrap: true,
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: documents.length,
                  itemBuilder: (context, index) {
                    final doc = documents[index];
                    String job = doc.get('job');
                    bool isDone = doc.get('isDone');
                    List<int> week = List<int>.from(doc.get('week'));

                    // 오늘 요일과 저장된 요일이 일치하지 않으면 표시하지 않음
                    if (!week.contains(today)) {
                      return Container();
                    }

                    int color = doc.get('color');
                    return Container(
                      margin: EdgeInsets.only(bottom: 8.0),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(10),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.1),
                            blurRadius: 5,
                            offset: Offset(0, 3),
                          ),
                        ],
                      ),
                      child: ListTile(
                        title: Text(
                          job,
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        trailing: Checkbox(
                          value: !isDone,
                          onChanged: (value) {
                            bucketService.update(doc.id, isDone: !value!);
                          },
                        ),
                        tileColor: Color(color), // 토글 색상 적용
                      ),
                    );
                  },
                );
              },
            );
          },
        ),
      ],
    );
  }
}
//activatedList.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'bucket_service.dart';

class ActivatedList extends StatefulWidget {
  final String userId;

  const ActivatedList({Key? key, required this.userId}) : super(key: key);

  @override
  _ActivatedListState createState() => _ActivatedListState();
}

class _ActivatedListState extends State<ActivatedList> {
  TextEditingController jobController = TextEditingController();
  TextEditingController infoController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final bucketService = context.watch<BucketService>();

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            "Activate Task",
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Expanded(
            child: FutureBuilder<QuerySnapshot>(
              future: bucketService.bucketCollection
                  .where('uid', isEqualTo: widget.userId)
                  .get(),
              builder: (context, snapshot) {
                final documents = snapshot.data?.docs ?? [];
                if (documents.isEmpty) {
                  return Center(child: Text("활성화된 리스트가 없습니다."));
                }
                return ListView.builder(
                  itemCount: documents.length,
                  itemBuilder: (context, index) {
                    final doc = documents[index];
                    String job = doc.get('job');
                    bool isActivate = doc.get('isActivate');

                    return Container(
                      margin: EdgeInsets.only(bottom: 8.0),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(10),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.1),
                            blurRadius: 5,
                            offset: Offset(0, 3),
                          ),
                        ],
                      ),
                      child: ListTile(
                        title: Text(
                          job,
                          style: TextStyle(
                              fontSize: 18, fontWeight: FontWeight.w500),
                        ),
                        trailing: CupertinoSwitch(
                          value: isActivate,
                          onChanged: (value) {
                            bucketService.update(doc.id, isActivate: value);
                          },
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
          Align(
            alignment: Alignment.center,
            child: ElevatedButton(
              onPressed: () {
                _showAddTaskModal(context, bucketService);
              },
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(Icons.add),
                  SizedBox(width: 4),
                  Text("Add Task"),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  void _showAddTaskModal(BuildContext context, BucketService bucketService) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text("새로운 Task 추가"),
              content: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: jobController,
                      decoration: InputDecoration(hintText: "제목 입력"),
                    ),
                    SizedBox(height: 8),
                    TextField(
                      controller: infoController,
                      decoration: InputDecoration(hintText: "정보 입력"),
                    ),
                    SizedBox(height: 8),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text("요일 선택"),
                        DropdownButton<int>(
                          hint: Text("요일 선택"),
                          items: List.generate(7, (index) {
                            return DropdownMenuItem<int>(
                              value: index,
                              child: Text(
                                  ["일", "월", "화", "수", "목", "금", "토"][index]),
                            );
                          }),
                          onChanged: (value) {
                            // 여기에 선택된 요일 저장 로직 추가
                          },
                        ),
                      ],
                    ),
                    SizedBox(height: 8),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text("색상 선택"),
                        GestureDetector(
                          onTap: () {
                            // 색상 선택 아이콘 클릭 시 로직 추가
                          },
                          child: Container(
                            width: 40,
                            height: 40,
                            color: Colors.blue, // 임시 색상
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: Text("취소"),
                ),
                TextButton(
                  onPressed: () {
                    if (jobController.text.isNotEmpty) {
                      bucketService.create(
                        jobController.text,
                        widget.userId,
                        info: infoController.text,
                        isActivate: false,
                        color: 0xFFFFFF, // 기본 색상 값 필요
                        week: [], // 기본 주간 값 필요
                      );
                    }
                    Navigator.pop(context);
                  },
                  child: Text("추가"),
                ),
              ],
            );
          },
        );
      },
    );
  }
}
//bucket_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class BucketService extends ChangeNotifier {
  final bucketCollection = FirebaseFirestore.instance.collection('bucket');

  Future<QuerySnapshot> read(String uid) async {
    DateTime now = DateTime.now();
    String today = "${now.year}-${now.month}-${now.day}";

    return bucketCollection
        .where('uid', isEqualTo: uid)
        .where('createdAt', isEqualTo: today)
        .get();
  }

  Future<void> resetIsDone(String uid) async {
    DateTime now = DateTime.now();
    String today = "${now.year}-${now.month}-${now.day}";

    QuerySnapshot snapshot = await bucketCollection
        .where('uid', isEqualTo: uid)
        .where('createdAt', isEqualTo: today)
        .get();

    for (var doc in snapshot.docs) {
      await bucketCollection.doc(doc.id).update({'isDone': false});
    }
  }

  void create(
    String job,
    String uid, {
    required String info,
    required bool isActivate,
    required int color,
    required List<int> week,
  }) async {
    DateTime now = DateTime.now();
    String today = "${now.year}-${now.month}-${now.day}";

    await bucketCollection.add({
      'uid': uid,
      'job': job,
      'isDone': false,
      'createdAt': today,
      'color': color,
      'week': week,
      'isActivate': isActivate,
      'info': info,
    });
    notifyListeners();
  }

  void update(
    String docId, {
    bool? isDone,
    bool? isRepeat,
    String? job,
    String? info,
    int? color,
    List<int>? week,
    bool? isActivate,
  }) async {
    Map<String, dynamic> updateData = {};

    if (isDone != null) updateData['isDone'] = isDone;
    if (isRepeat != null) updateData['isRepeat'] = isRepeat;
    if (job != null) updateData['job'] = job;
    if (info != null) updateData['info'] = info;
    if (color != null) updateData['color'] = color;
    if (week != null) updateData['week'] = week;
    if (isActivate != null) updateData['isActivate'] = isActivate;

    if (updateData.isNotEmpty) {
      await bucketCollection.doc(docId).update(updateData);
      notifyListeners();
    }
  }

  void delete(String docId) async {
    await bucketCollection.doc(docId).delete();
    notifyListeners();
  }
}
