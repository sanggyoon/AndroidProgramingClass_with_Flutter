플러터 프로젝트를 진행할 거야. 다음 조건에 맞춰 코드 생성하고, 기존 코드 수정해줘.
1. todoList.dart 에 표시되는 리스트의 isDone: false/ture 비율을 출력하는 graph.dart 위젯을 제작할거야.
2. graph.dart 위젯은 homepage.dart 에서 body 안의 세번째 위젯이 될거야.
homepage.dart, bucket_service.dart, todoList.dart, activatedList.dart 순으로 코드 보여줄게.
//homepage.dart
import 'package:bucket_list_with_firebase/activatedList.dart';
import 'package:bucket_list_with_firebase/auth_service.dart';
import 'package:bucket_list_with_firebase/bucket_service.dart';
import 'package:bucket_list_with_firebase/main.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'todoList.dart';

/// 홈페이지
class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  TextEditingController jobController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final authService = context.read<AuthService>();
    final user = authService.currentUser()!;
    return Consumer<BucketService>(
      builder: (context, bucketService, child) {
        return Scaffold(
          appBar: AppBar(
            backgroundColor: const Color.fromARGB(255, 88, 165, 232),
            title: const Text("버킷 리스트"),
            actions: [
              TextButton(
                child: const Text(
                  "로그아웃",
                  style: TextStyle(color: Colors.white),
                ),
                onPressed: () {
                  // 로그아웃
                  context.read<AuthService>().signOut();

                  // 로그인 페이지로 이동
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (context) => const LoginPage()),
                  );
                },
              ),
            ],
          ),
          body: SingleChildScrollView(
            // ScrollView로 감싸줌
            child: Column(
              children: [
                TodoList(userId: user.uid),
                ActivatedList(userId: user.uid),
              ],
            ),
          ),
        );
      },
    );
  }
}
//bucket_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class BucketService extends ChangeNotifier {
  final bucketCollection = FirebaseFirestore.instance.collection('bucket');
  final lastCheckedDateCollection =
      FirebaseFirestore.instance.collection('lastCheckedDate');

  Future<void> resetIsDoneIfDateChanged(String uid) async {
    DateTime now = DateTime.now();
    String today = "${now.year}-${now.month}-${now.day}";

    // Firestore에서 마지막 확인 날짜 가져오기
    DocumentSnapshot lastCheckedDoc =
        await lastCheckedDateCollection.doc(uid).get();

    if (!lastCheckedDoc.exists || lastCheckedDoc['date'] != today) {
      // 날짜가 다르면 모든 isDone 필드를 false로 리셋
      QuerySnapshot snapshot =
          await bucketCollection.where('uid', isEqualTo: uid).get();

      for (var doc in snapshot.docs) {
        await bucketCollection.doc(doc.id).update({'isDone': false});
      }

      // 오늘 날짜를 Firestore에 저장
      await lastCheckedDateCollection.doc(uid).set({'date': today});
      notifyListeners();
    }
  }

  Future<QuerySnapshot> read(String uid) async {
    DateTime now = DateTime.now();
    String today = "${now.year}-${now.month}-${now.day}";

    return bucketCollection
        .where('uid', isEqualTo: uid)
        .where('createdAt', isEqualTo: today)
        .get();
  }

  Future<void> resetIsDone(String uid) async {
    DateTime now = DateTime.now();
    String today = "${now.year}-${now.month}-${now.day}";

    QuerySnapshot snapshot = await bucketCollection
        .where('uid', isEqualTo: uid)
        .where('createdAt', isEqualTo: today)
        .get();

    for (var doc in snapshot.docs) {
      await bucketCollection.doc(doc.id).update({'isDone': false});
    }
  }

  void create(
    String job,
    String uid, {
    required String info,
    required bool isActivate,
    required int color,
    required List<int> week,
  }) async {
    DateTime now = DateTime.now();
    String today = "${now.year}-${now.month}-${now.day}";

    await bucketCollection.add({
      'uid': uid,
      'job': job,
      'isDone': false,
      'createdAt': today,
      'color': color,
      'week': week,
      'isActivate': isActivate,
      'info': info,
    });
    notifyListeners();
  }

  void update(
    String docId, {
    bool? isDone,
    bool? isRepeat,
    String? job,
    String? info,
    int? color,
    List<int>? week,
    bool? isActivate,
  }) async {
    Map<String, dynamic> updateData = {};

    if (isDone != null) updateData['isDone'] = isDone;
    if (isRepeat != null) updateData['isRepeat'] = isRepeat;
    if (job != null) updateData['job'] = job;
    if (info != null) updateData['info'] = info;
    if (color != null) updateData['color'] = color;
    if (week != null) updateData['week'] = week;
    if (isActivate != null) updateData['isActivate'] = isActivate;

    if (updateData.isNotEmpty) {
      await bucketCollection.doc(docId).update(updateData);
      notifyListeners();
    }
  }

  void delete(String docId) async {
    await bucketCollection.doc(docId).delete();
    notifyListeners();
  }
}
//todoList.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'bucket_service.dart';
import 'dart:core';

class TodoList extends StatefulWidget {
  final String userId;

  TodoList({required this.userId});

  @override
  _TodoListState createState() => _TodoListState();
}

class _TodoListState extends State<TodoList> with TickerProviderStateMixin {
  bool _isExpanded = true; // 리스트의 확장 상태를 관리

  @override
  Widget build(BuildContext context) {
    final bucketService = context.watch<BucketService>();
    DateTime now = DateTime.now();
    int today = now.weekday; // 오늘의 요일 (1=월요일, 7=일요일)

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                "Today Tasks",
                style: TextStyle(
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                ),
              ),
              IconButton(
                icon: AnimatedRotation(
                  turns: _isExpanded ? 0.5 : 0.5, // 아이콘 회전 애니메이션
                  duration: Duration(milliseconds: 300),
                  child: Icon(
                    _isExpanded
                        ? Icons.keyboard_arrow_up
                        : Icons.keyboard_arrow_down,
                    size: 30,
                  ),
                ),
                onPressed: () {
                  setState(() {
                    _isExpanded = !_isExpanded; // 리스트 확장 상태 전환
                  });
                },
              ),
            ],
          ),
          AnimatedSize(
            duration: Duration(milliseconds: 300),
            curve: Curves.easeInOut,
            child: _isExpanded // 리스트가 확장된 경우만 표시
                ? Consumer<BucketService>(
                    builder: (context, bucketService, child) {
                      return FutureBuilder<QuerySnapshot>(
                        future: bucketService.bucketCollection
                            .where('uid', isEqualTo: widget.userId)
                            .where('isActivate', isEqualTo: true)
                            .get(),
                        builder: (context, snapshot) {
                          final documents = snapshot.data?.docs ?? [];
                          if (documents.isEmpty) {
                            return Center(child: Text("오늘의 할 일을 추가해주세요."));
                          }
                          return ListView.builder(
                            shrinkWrap: true,
                            physics: NeverScrollableScrollPhysics(),
                            itemCount: documents.length,
                            itemBuilder: (context, index) {
                              final doc = documents[index];
                              String job = doc.get('job');
                              bool isDone = doc.get('isDone');
                              List<int> week = List<int>.from(doc.get('week'));

                              // 오늘 요일과 저장된 요일이 일치하지 않으면 표시하지 않음
                              if (!week.contains(today)) {
                                return Container();
                              }

                              int color = doc.get('color');
                              return Container(
                                margin: EdgeInsets.only(bottom: 8.0),
                                decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(10),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.1),
                                      blurRadius: 5,
                                      offset: Offset(0, 3),
                                    ),
                                  ],
                                ),
                                child: ListTile(
                                  leading: Container(
                                    width: 8,
                                    height: 30,
                                    decoration: BoxDecoration(
                                      color: Color(color),
                                      borderRadius: BorderRadius.circular(
                                          8), // 원하는 반지름 값 설정
                                    ),
                                  ),
                                  title: Text(
                                    job,
                                    style: TextStyle(
                                      fontSize: 18,
                                      fontWeight: FontWeight.w500,
                                      color:
                                          isDone ? Colors.grey : Colors.black,
                                      decoration: isDone
                                          ? TextDecoration.lineThrough
                                          : TextDecoration.none,
                                    ),
                                  ),
                                  trailing: Checkbox(
                                    value: isDone,
                                    onChanged: (value) {
                                      bucketService.update(doc.id,
                                          isDone: value!);
                                    },
                                  ),
                                ),
                              );
                            },
                          );
                        },
                      );
                    },
                  )
                : SizedBox.shrink(),
          ),
        ],
      ),
    );
  }
}
//activatedList.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'bucket_service.dart';

class ActivatedList extends StatefulWidget {
  final String userId;

  const ActivatedList({Key? key, required this.userId}) : super(key: key);

  @override
  _ActivatedListState createState() => _ActivatedListState();
}

class _ActivatedListState extends State<ActivatedList>
    with TickerProviderStateMixin {
  final TextEditingController jobController = TextEditingController();
  final TextEditingController infoController = TextEditingController();
  List<int> selectedDays = [];
  Color? selectedColor;
  bool _isExpanded = true;

  @override
  Widget build(BuildContext context) {
    final bucketService = context.watch<BucketService>();

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildHeader(),
          _buildTaskList(bucketService),
          _buildAddTaskButton(context, bucketService),
        ],
      ),
    );
  }

  Widget _buildHeader() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          "Activate Task",
          style: const TextStyle(
            fontSize: 32,
            fontWeight: FontWeight.bold,
          ),
        ),
        IconButton(
          icon: AnimatedRotation(
            turns: _isExpanded ? 0 : 0.5,
            duration: const Duration(milliseconds: 300),
            child: Icon(
              _isExpanded ? Icons.keyboard_arrow_up : Icons.keyboard_arrow_down,
              size: 30,
            ),
          ),
          onPressed: () {
            setState(() {
              _isExpanded = !_isExpanded;
            });
          },
        ),
      ],
    );
  }

  Widget _buildTaskList(BucketService bucketService) {
    return AnimatedSize(
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeInOut,
      child: _isExpanded
          ? FutureBuilder<QuerySnapshot>(
              future: bucketService.bucketCollection
                  .where('uid', isEqualTo: widget.userId)
                  .get(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }

                final documents = snapshot.data?.docs ?? [];
                if (documents.isEmpty) {
                  return const Center(child: Text("활성화된 리스트가 없습니다."));
                }

                return ListView.builder(
                  shrinkWrap: true,
                  itemCount: documents.length,
                  itemBuilder: (context, index) {
                    final doc = documents[index];
                    return _buildTaskTile(doc, bucketService);
                  },
                );
              },
            )
          : const SizedBox.shrink(),
    );
  }

  Widget _buildTaskTile(
      QueryDocumentSnapshot doc, BucketService bucketService) {
    String job = doc.get('job');
    String? info = doc.get('info');
    bool isActivate = doc.get('isActivate');
    int colorValue = doc.get('color');
    Color taskColor = Color(colorValue);

    return Container(
      margin: const EdgeInsets.only(bottom: 8.0),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 5,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: ListTile(
        leading: Container(
          width: 8,
          height: 30,
          decoration: BoxDecoration(
            color: taskColor,
            borderRadius: BorderRadius.circular(8),
          ),
        ),
        title: Text(
          job,
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w500,
          ),
        ),
        subtitle: info != null && info.isNotEmpty
            ? Text(
                info,
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.black54,
                ),
              )
            : null,
        trailing: CupertinoSwitch(
          value: isActivate,
          onChanged: (value) {
            bucketService.update(doc.id, isActivate: value);
          },
          activeColor: taskColor,
        ),
        onLongPress: () {
          _confirmDeleteTask(context, doc.id, bucketService);
        },
      ),
    );
  }

  Widget _buildAddTaskButton(
      BuildContext context, BucketService bucketService) {
    return Align(
      alignment: Alignment.center,
      child: ElevatedButton(
        onPressed: () {
          _showAddTaskModal(context, bucketService);
        },
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: const [
            Icon(Icons.add),
            SizedBox(width: 4),
            Text("Add Task"),
          ],
        ),
      ),
    );
  }

  void _showAddTaskModal(BuildContext context, BucketService bucketService) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text("새로운 Task 추가"),
              content: _buildAddTaskForm(setState),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text("취소"),
                ),
                TextButton(
                  onPressed: () {
                    if (jobController.text.isNotEmpty &&
                        selectedDays.isNotEmpty &&
                        selectedColor != null) {
                      bucketService.create(
                        jobController.text,
                        widget.userId,
                        info: infoController.text,
                        isActivate: false,
                        color: selectedColor!.value,
                        week: selectedDays,
                      );
                      Navigator.pop(context);
                    }
                  },
                  child: const Text("추가"),
                ),
              ],
            );
          },
        );
      },
    );
  }

  Widget _buildAddTaskForm(Function setState) {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisSize: MainAxisSize.min,
        children: [
          TextField(
            controller: jobController,
            decoration: const InputDecoration(hintText: "제목 입력 (필수)"),
          ),
          const SizedBox(height: 8),
          TextField(
            controller: infoController,
            decoration: const InputDecoration(hintText: "정보 입력 (선택)"),
          ),
          const SizedBox(height: 16),
          _buildWeekdaySelector(setState),
          const SizedBox(height: 16),
          _buildColorPicker(setState),
        ],
      ),
    );
  }

  Widget _buildWeekdaySelector(Function setState) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text("요일 선택"),
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: List.generate(7, (index) {
            return GestureDetector(
              onTap: () {
                setState(() {
                  if (selectedDays.contains(index + 1)) {
                    selectedDays.remove(index + 1);
                  } else {
                    selectedDays.add(index + 1);
                  }
                });
              },
              child: Container(
                padding:
                    const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                decoration: BoxDecoration(
                  color: selectedDays.contains(index + 1)
                      ? Colors.blue.withOpacity(0.3)
                      : Colors.grey[300],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  ["M", "T", "W", "T", "F", "S", "S"][index],
                  style: TextStyle(
                    fontSize: 16,
                    color: selectedDays.contains(index + 1)
                        ? Colors.blue
                        : Colors.black,
                  ),
                ),
              ),
            );
          }),
        ),
      ],
    );
  }

  Widget _buildColorPicker(Function setState) {
    final colors = [
      Colors.red,
      Colors.orange,
      Colors.yellow,
      Colors.green,
      Colors.blue,
      Colors.purple,
      Colors.grey,
    ];
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text("색상 선택"),
        Wrap(
          spacing: 8.0,
          runSpacing: 8.0,
          children: colors
              .map(
                (color) => GestureDetector(
                  onTap: () {
                    setState(() => selectedColor = color);
                  },
                  child: Container(
                    width: 40,
                    height: 40,
                    decoration: BoxDecoration(
                      color: color,
                      borderRadius: BorderRadius.circular(20),
                      border: Border.all(
                        color: selectedColor == color
                            ? Colors.black
                            : Colors.transparent,
                        width: 2,
                      ),
                    ),
                    child: selectedColor == color
                        ? const Icon(Icons.check, color: Colors.white)
                        : null,
                  ),
                ),
              )
              .toList(),
        ),
      ],
    );
  }
}

void _confirmDeleteTask(
    BuildContext context, String taskId, BucketService bucketService) {
  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text("정말 삭제하시겠습니까?"),
        content: Text("이 작업은 되돌릴 수 없습니다."),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context); // 취소 시 다이얼로그 닫기
            },
            child: Text("취소"),
          ),
          TextButton(
            onPressed: () {
              bucketService.delete(taskId); // 데이터 삭제
              Navigator.pop(context); // 다이얼로그 닫기
            },
            child: Text(
              "삭제",
              style: TextStyle(color: Colors.red),
            ),
          ),
        ],
      );
    },
  );
}
