플러터 프로젝트를 진행할거야. 다음 조건에 맞춰 코드를 살펴보고 수정해줘. 코드를 모두 수정하면 오류가 없는지 차근차근 천천히 검토하고 보여줘.

1. activatedList.dart 에서 todolist를 생성한다.
2. 생성된 todolist는 "activate list" 밑에 출력되고 토글을 통해 on/off 하고 해당 토글의 상태에 따라 데이터 정보 isActivate: true/false 를 저장해.
3. isActivate: true 인 데이터 list 는 todoList.dart 에서 "today tastk" 밑에 출력돼.
4. 날짜가 변하면 저장된 데이터의 'isDone' 정보가 모두 false로 변하게 해줘.

모든 코드를 보여줄게 코드는 homepage.dart, todoList.dart, activatedList.dart, bucket_service.dart 총 4개야.
//homepage
import 'package:bucket_list_with_firebase/activatedList.dart';
import 'package:bucket_list_with_firebase/auth_service.dart';
import 'package:bucket_list_with_firebase/bucket_service.dart';
import 'package:bucket_list_with_firebase/main.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'todoList.dart';

/// 홈페이지
class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  TextEditingController jobController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final authService = context.read<AuthService>();
    final user = authService.currentUser()!;
    return Consumer<BucketService>(
      builder: (context, bucketService, child) {
        return Scaffold(
          appBar: AppBar(
            backgroundColor: const Color.fromARGB(255, 88, 165, 232),
            title: const Text("버킷 리스트"),
            actions: [
              TextButton(
                child: const Text(
                  "로그아웃",
                  style: TextStyle(color: Colors.white),
                ),
                onPressed: () {
                  // 로그아웃
                  context.read<AuthService>().signOut();

                  // 로그인 페이지로 이동
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (context) => const LoginPage()),
                  );
                },
              ),
            ],
          ),
          body: Column(
            children: [
              TodoList(userId: user.uid, jobController: jobController),
              SizedBox(height: 16), // 위젯 간 간격 추가
              Expanded(
                child: ActivatedList(userId: user.uid),
              ),
            ],
          ),
        );
      },
    );
  }
}
//todoList.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'bucket_service.dart';

class TodoList extends StatefulWidget {
  final String userId;

  TodoList({required this.userId});

  @override
  _TodoListState createState() => _TodoListState();
}

class _TodoListState extends State<TodoList> {
  @override
  Widget build(BuildContext context) {
    final bucketService = context.watch<BucketService>();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            "Today Tasks",
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Consumer<BucketService>(
          builder: (context, bucketService, child) {
            return FutureBuilder<QuerySnapshot>(
              future: bucketService.bucketCollection
                  .where('uid', isEqualTo: widget.userId)
                  .where('isActivate', isEqualTo: true)
                  .get(),
              builder: (context, snapshot) {
                final documents = snapshot.data?.docs ?? [];
                if (documents.isEmpty) {
                  return Center(child: Text("오늘의 할 일을 추가해주세요."));
                }
                return ListView.builder(
                  shrinkWrap: true,
                  physics: NeverScrollableScrollPhysics(),
                  itemCount: documents.length,
                  itemBuilder: (context, index) {
                    final doc = documents[index];
                    String job = doc.get('job');

                    return Container(
                      margin: EdgeInsets.only(bottom: 8.0),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(10),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.1),
                            blurRadius: 5,
                            offset: Offset(0, 3),
                          ),
                        ],
                      ),
                      child: ListTile(
                        title: Text(
                          job,
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ),
                    );
                  },
                );
              },
            );
          },
        ),
      ],
    );
  }
}
//activatedList.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'bucket_service.dart';

class ActivatedList extends StatefulWidget {
  final String userId;

  const ActivatedList({Key? key, required this.userId}) : super(key: key);

  @override
  _ActivatedListState createState() => _ActivatedListState();
}

class _ActivatedListState extends State<ActivatedList> {
  TextEditingController jobController = TextEditingController();
  TextEditingController infoController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    final bucketService = context.watch<BucketService>();

    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Activate Task",
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 16),
            Expanded(
              child: FutureBuilder<QuerySnapshot>(
                future: bucketService.bucketCollection
                    .where('uid', isEqualTo: widget.userId)
                    .get(),
                builder: (context, snapshot) {
                  final documents = snapshot.data?.docs ?? [];
                  if (documents.isEmpty) {
                    return Center(
                      child: Text("활성화된 리스트가 없습니다."),
                    );
                  }
                  return ListView.builder(
                    itemCount: documents.length,
                    itemBuilder: (context, index) {
                      final doc = documents[index];
                      String job = doc.get('job');
                      bool isActivate = doc.get('isActivate');

                      return Container(
                        margin: EdgeInsets.only(bottom: 8.0),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(10),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.1),
                              blurRadius: 5,
                              offset: Offset(0, 3),
                            ),
                          ],
                        ),
                        child: ListTile(
                          title: Text(
                            job,
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          trailing: CupertinoSwitch(
                            value: isActivate,
                            onChanged: (value) {
                              bucketService.update(doc.id, isActivate: value);
                            },
                          ),
                        ),
                      );
                    },
                  );
                },
              ),
            ),
            Align(
              alignment: Alignment.center,
              child: ElevatedButton(
                onPressed: () {
                  _showAddTaskModal(context, bucketService);
                },
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Icon(Icons.add),
                    SizedBox(width: 4),
                    Text("Add Task"),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showAddTaskModal(BuildContext context, BucketService bucketService) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text("새로운 Task 추가"),
              content: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextField(
                      controller: jobController,
                      decoration: InputDecoration(hintText: "제목 입력"),
                    ),
                    SizedBox(height: 8),
                    TextField(
                      controller: infoController,
                      decoration: InputDecoration(hintText: "정보 입력"),
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                  child: Text("취소"),
                ),
                TextButton(
                  onPressed: () {
                    if (jobController.text.isNotEmpty) {
                      bucketService.create(
                        jobController.text,
                        widget.userId,
                        info: infoController.text,
                        isActivate: false, // 기본값은 비활성화
                      );
                    }
                    Navigator.pop(context);
                  },
                  child: Text("추가"),
                ),
              ],
            );
          },
        );
      },
    );
  }
}
//bucket_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';

class BucketService extends ChangeNotifier {
  final bucketCollection = FirebaseFirestore.instance.collection('bucket');

  Future<QuerySnapshot> read(String uid) async {
    // 오늘 날짜 구하기
    DateTime now = DateTime.now();
    String today = "${now.year}-${now.month}-${now.day}";

    // 오늘 날짜에 해당하는 bucketList 가져오기
    return bucketCollection
        .where('uid', isEqualTo: uid)
        .where('createdAt', isEqualTo: today)
        .get();
  }

  void create(
    String job,
    String uid, {
    required String info,
    required bool isActivate,
    required int color,
    required List<int> week,
  }) async {
    // 오늘 날짜 구하기
    DateTime now = DateTime.now();
    String today = "${now.year}-${now.month}-${now.day}";

    // bucket 만들기
    await bucketCollection.add({
      'uid': uid, // 유저 식별자
      'job': job, // 하고싶은 일
      'isDone': false, // 완료 여부
      'createdAt': today, // 생성 날짜
      'color': color, // 리스트 색상
      'week': week, // 주간 정보
      'isActivate': false, // 활성화 여부
      'info': info, // 추가 정보
    });
    notifyListeners(); // 화면 갱신
  }

  void update(
    String docId, {
    bool? isDone,
    bool? isRepeat,
    String? job,
    String? info,
    int? color,
    List<int>? week,
    bool? isActivate,
  }) async {
    Map<String, dynamic> updateData = {};

    if (isDone != null) updateData['isDone'] = isDone;
    if (isRepeat != null) updateData['isRepeat'] = isRepeat;
    if (job != null) updateData['job'] = job;
    if (info != null) updateData['info'] = info;
    if (color != null) updateData['color'] = color;
    if (week != null) updateData['week'] = week;
    if (isActivate != null) updateData['isActivate'] = isActivate;

    if (updateData.isNotEmpty) {
      await bucketCollection.doc(docId).update(updateData);
      notifyListeners();
    }
  }

  void delete(String docId) async {
    // bucket 삭제
    await bucketCollection.doc(docId).delete();
    notifyListeners(); // 화면 갱신
  }
}
